const express = require('express');
const Review = require('../model/Review');
const Order = require('../model/Order');
const User = require('../model/User');
const router = express.Router();

// Normalize query
const normalize = (s = '') => String(s).trim().toLowerCase();

// GET /api/reviews?q=&rating=&page=&limit=
router.get('/', async (req, res) => {
  try {
    const { q = '', rating = '', page = 1, limit = 10 } = req.query;
    
    // Build match stage cho aggregation
    const matchStage = {};
    
    if (rating) {
      matchStage.rating = Number(rating);
    }
    
    // N·∫øu c√≥ query, t√¨m User v√† Order tr∆∞·ªõc
    let userIds = [];
    let orderIds = [];
    
    if (q && q.trim()) {
      const like = new RegExp(req.query.q, 'i');
      
      // T√¨m Users kh·ªõp v·ªõi query
      const matchingUsers = await User.find({
        $or: [
          { name: like },
          { phone: like }
        ]
      }).select('_id');
      userIds = matchingUsers.map(u => u._id);
      
      // T√¨m Orders kh·ªõp v·ªõi query
      const matchingOrders = await Order.find({
        code: like
      }).select('_id');
      orderIds = matchingOrders.map(o => o._id);
    }
    
    // Build match conditions
    // N·∫øu c√≥ rating, th√™m v√†o matchStage
    if (rating) {
      matchStage.rating = Number(rating);
    }
    
    // N·∫øu c√≥ query, th√™m ƒëi·ªÅu ki·ªán t√¨m ki·∫øm
    if (q && q.trim()) {
      const like = new RegExp(req.query.q, 'i');
      const orConditions = [{ comment: like }];
      
      // N·∫øu t√¨m th·∫•y users/orders, th√™m v√†o ƒëi·ªÅu ki·ªán
      if (userIds.length > 0) {
        orConditions.push({ userId: { $in: userIds } });
      }
      if (orderIds.length > 0) {
        orConditions.push({ orderId: { $in: orderIds } });
      }
      
      // N·∫øu c√≥ nhi·ªÅu ƒëi·ªÅu ki·ªán trong $or, d√πng $or, n·∫øu ch·ªâ c√≥ 1 th√¨ g√°n tr·ª±c ti·∫øp
      if (orConditions.length > 1) {
        matchStage.$or = orConditions;
      } else if (orConditions.length === 1) {
        Object.assign(matchStage, orConditions[0]);
      }
    }
    
    const skip = (Number(page) - 1) * Number(limit);
    
    // S·ª≠ d·ª•ng aggregation ƒë·ªÉ populate v√† filter
    const pipeline = [
      { $match: matchStage },
      {
        $lookup: {
          from: 'users',
          localField: 'userId',
          foreignField: '_id',
          as: 'userId'
        }
      },
      {
        $unwind: {
          path: '$userId',
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $lookup: {
          from: 'orders',
          localField: 'orderId',
          foreignField: '_id',
          as: 'orderId'
        }
      },
      {
        $unwind: {
          path: '$orderId',
          preserveNullAndEmptyArrays: true
        }
      },
      {
        $project: {
          _id: 1,
          orderId: { _id: '$orderId._id', code: '$orderId.code' },
          userId: { _id: '$userId._id', name: '$userId.name', phone: '$userId.phone' },
          rating: 1,
          comment: 1,
          items: 1,
          createdAt: 1,
          updatedAt: 1
        }
      },
      { $sort: { createdAt: -1 } },
      { $skip: skip },
      { $limit: Number(limit) }
    ];
    
    const countPipeline = [
      { $match: matchStage },
      { $count: 'total' }
    ];
    
    const [dataResult, countResult] = await Promise.all([
      Review.aggregate(pipeline),
      Review.aggregate(countPipeline)
    ]);
    
    const data = dataResult || [];
    const total = countResult && countResult.length > 0 ? countResult[0].total : 0;
    
    res.json({ data, total, page: Number(page), limit: Number(limit) });
  } catch (e) {
    console.error('GET /api/reviews error:', e);
    res.status(500).json({ message: 'L·ªói l·∫•y danh s√°ch ƒë√°nh gi√°' });
  }
});

// GET /api/reviews/:id
router.get('/:id', async (req, res) => {
  try {
    const review = await Review.findById(req.params.id)
      .populate('userId', 'name phone')
      .populate('orderId', 'code _id');
    if (!review) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°' });
    }
    res.json(review);
  } catch (e) {
    console.error('GET /api/reviews/:id error:', e);
    res.status(500).json({ message: 'L·ªói l·∫•y chi ti·∫øt ƒë√°nh gi√°' });
  }
});

// GET /api/reviews/order/:orderId
router.get('/order/:orderId', async (req, res) => {
  try {
    const reviews = await Review.find({ orderId: req.params.orderId })
      .populate('userId', 'name phone')
      .populate('orderId', 'code _id')
      .sort({ createdAt: -1 });
    res.json(reviews);
  } catch (e) {
    console.error('GET /api/reviews/order/:orderId error:', e);
    res.status(500).json({ message: 'L·ªói l·∫•y ƒë√°nh gi√° theo ƒë∆°n h√†ng' });
  }
});

// GET /api/reviews/product/:productId - L·∫•y ƒë√°nh gi√° theo s·∫£n ph·∫©m
router.get('/product/:productId', async (req, res) => {
  try {
    const productId = req.params.productId;
    console.log('üîç Fetching reviews for productId:', productId);
    
    // L·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ c√≥ t√™n s·∫£n ph·∫©m
    let productName = null;
    try {
      const { Product } = require('../model/Shoes');
      const product = await Product.findById(productId);
      if (product && product.name) {
        productName = product.name;
        console.log('üì¶ Product name:', productName);
      }
    } catch (e) {
      console.log('Could not fetch product name:', e);
    }
    
    // T√¨m t·∫•t c·∫£ reviews, sau ƒë√≥ filter ƒë·ªÉ l·∫•y nh·ªØng reviews c√≥ ch·ª©a s·∫£n ph·∫©m n√†y
    const allReviews = await Review.find({})
      .populate('userId', 'name phone')
      .populate('orderId', 'code _id')
      .sort({ createdAt: -1 });
    
    console.log('üìä Total reviews found:', allReviews.length);
    
    // L·ªçc l·∫°i ƒë·ªÉ ch·ªâ l·∫•y reviews c√≥ ch·ª©a s·∫£n ph·∫©m n√†y
    const filteredReviews = allReviews.filter(review => {
      if (!review.items || review.items.length === 0) return false;
      return review.items.some(item => {
        // Ki·ªÉm tra theo productId (h·ªó tr·ª£ c·∫£ ObjectId v√† string)
        const itemProductId = item.productId;
        let matchById = false;
        
        if (itemProductId) {
          // X·ª≠ l√Ω nhi·ªÅu tr∆∞·ªùng h·ª£p: ObjectId, string, ho·∫∑c object c√≥ _id
          let itemIdStr = '';
          if (typeof itemProductId === 'object' && itemProductId._id) {
            itemIdStr = String(itemProductId._id);
          } else if (itemProductId.toString) {
            itemIdStr = itemProductId.toString();
          } else {
            itemIdStr = String(itemProductId);
          }
          const productIdStr = String(productId);
          matchById = itemIdStr === productIdStr;
        }
        
        // Ki·ªÉm tra theo t√™n s·∫£n ph·∫©m (fallback - d√πng khi productId kh√¥ng kh·ªõp)
        const matchByName = productName && item.name && 
          item.name.toLowerCase().trim() === productName.toLowerCase().trim();
        
        if (matchById || matchByName) {
          console.log('‚úÖ Match found:', {
            itemProductId,
            itemName: item.name,
            matchById,
            matchByName
          });
        }
        
        return matchById || matchByName;
      });
    });
    
    console.log('‚≠ê Filtered reviews for product:', filteredReviews.length);
    
    // T√≠nh rating trung b√¨nh t·ª´ filtered reviews
    let avgRating = 0;
    let totalReviews = 0;
    if (filteredReviews.length > 0) {
      const sum = filteredReviews.reduce((acc, r) => acc + (r.rating || 0), 0);
      avgRating = sum / filteredReviews.length;
      totalReviews = filteredReviews.length;
      console.log('üìà Average rating:', avgRating, 'Total:', totalReviews);
    }
    
    res.json({
      reviews: filteredReviews,
      averageRating: parseFloat(avgRating.toFixed(1)),
      totalReviews
    });
  } catch (e) {
    console.error('GET /api/reviews/product/:productId error:', e);
    res.status(500).json({ message: 'L·ªói l·∫•y ƒë√°nh gi√° theo s·∫£n ph·∫©m' });
  }
});

// POST /api/reviews
router.post('/', async (req, res) => {
  try {
    const { orderId, userId, rating, comment, items } = req.body;
    
    if (!orderId || !userId || !rating) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: orderId, userId, rating' });
    }
    
    if (rating < 1 || rating > 5) {
      return res.status(400).json({ message: 'Rating ph·∫£i t·ª´ 1 ƒë·∫øn 5' });
    }
    
    // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
    }
    
    // Ki·ªÉm tra ƒë√£ ƒë√°nh gi√° ch∆∞a
    const existingReview = await Review.findOne({ orderId, userId });
    if (existingReview) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ ƒë√°nh gi√° ƒë∆°n h√†ng n√†y r·ªìi' });
    }
    
    const review = new Review({
      orderId,
      userId,
      rating: Number(rating),
      comment: comment || '',
      items: items || []
    });
    
    await review.save();
    
    // Populate ƒë·ªÉ tr·∫£ v·ªÅ ƒë·∫ßy ƒë·ªß th√¥ng tin
    await review.populate('userId', 'name phone');
    await review.populate('orderId', 'code _id');
    
    res.status(201).json(review);
  } catch (e) {
    console.error('POST /api/reviews error:', e);
    if (e.code === 11000) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ ƒë√°nh gi√° ƒë∆°n h√†ng n√†y r·ªìi' });
    }
    res.status(500).json({ message: 'L·ªói t·∫°o ƒë√°nh gi√°' });
  }
});

// DELETE /api/reviews/:id
router.delete('/:id', async (req, res) => {
  try {
    const review = await Review.findByIdAndDelete(req.params.id);
    if (!review) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°' });
    }
    res.json({ message: 'X√≥a ƒë√°nh gi√° th√†nh c√¥ng' });
  } catch (e) {
    console.error('DELETE /api/reviews/:id error:', e);
    res.status(500).json({ message: 'L·ªói x√≥a ƒë√°nh gi√°' });
  }
});

module.exports = router;

